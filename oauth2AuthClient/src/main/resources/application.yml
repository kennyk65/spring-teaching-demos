spring:
  application.name: client
  security:
    oauth2:
      client:
        registration:

          # Github OAuth2 settings are controlled here: https://github.com/settings/developers
          github:
            clientId:  <set-as-environment-variable-instead>
            clientSecret:  <set-as-environment-variable-instead>

          # Google OAuth2 settings are controlled here:  https://console.cloud.google.com/apis/dashboard
          google:
            client-id: <set-as-environment-variable-instead>
            client-secret: <set-as-environment-variable-instead>

          # A Spring-based authorization server can be controlled here: https://github.com/kennyk65/spring-teaching-demos/tree/master/oauth2AuthServer
          spring-auth-server:
            client-id: oidc-client
            client-secret: doNotTell
            client-name: Spring Boot OAuth2 Client
            provider: spring-authorization-server
            scope: openid
            redirect-uri: "http://localhost:8080/login/oauth2/code/oidc-client"
            authorization-grant-type: "authorization_code"

        provider:
          spring-authorization-server:
            authorization-uri: "http://localhost:9000/oauth2/authorize"
            token-uri: "http://localhost:9000/oauth2/token"
            # the user-info-uri defaults to "http://localhost:9000/userinfo"
            jwk-set-uri: "http://localhost:9000/oauth2/jwks" 
            user-name-attribute: "sub"  # Spring security calls the user's name "userName" and it is sent in the "sub" (subject) claim.

logging:
  level:
    org.springframework.security.oauth2: DEBUG
