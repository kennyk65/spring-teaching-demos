
# Probably prefer to set this to true in production:
spring.thymeleaf.cache=false

# This setting keeps Spring Cloud AWS from trying (and failing) to identify
# the CloudFormation stack on which the deployment is running.  It does this 
# so you can inject things by their logical names in the template rather than 
# physical names.  Since it always makes the app blow up on BeanStalk, I'm 
# turning it off.
# See https://github.com/spring-cloud/spring-cloud-aws/issues/50:
cloud.aws.stack.auto = false

# When running as a WAR file on a local environment, usually port 8080 is used.
# However, when running on AWS in Elastic Beanstalk Tomcat platform, the port should be 80.
# When running on AWS in Elastic Beanstalk Java SE platform, the port should be 5000.
# Unfortunately, we cannot tell which kind of environment we are in until after the app launches
# and it sniffs the EC2 Instance Metadata; by then it is too late to set the port.
server.port=80     

# The internal AWS code tends to log ugly stack traces when instance metadata is not
# available.  This setting suppresses the noise.
#logging.level.com.amazonaws.util=ERROR
#logging.level.software.amazon.awssdk.imds.internal=FATAL
#software.amazon.awssdk.imds.internal
