---
AWSTemplateFormatVersion: '2010-09-09'

# This runs an EC2 instance in a VPC with a Spring Boot application on it.
# The user data will Setup Cognito User Pool, Client App, and a sample user.
# (There are several obstacles to doing the above using CloudFormation, ugh.)
# The app will use info on the user pool, client, etc. to back the login function.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet
          - AmazonLinuxAMI

Parameters:

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.

  AmazonLinuxAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI using the Parameter Store...

  JavaAppJar:
    Type: String
    Default: https://s3-us-west-2.amazonaws.com/kk-uploads-oregon/cognito-demo/spring-security-cognito-login-1.jar
    Description:  URL of the JAR for running the app.

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:     # Since this is a demo, make relaxed password requirements.
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false      

      
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ExampleSpringApp
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH       # As far as I can tell, this is simply username/password authentication.
      GenerateSecret: true        # We will need the secret in our Java code to make the call.  Don't even know why this is optional.
      UserPoolId: !Ref CognitoUserPool

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMI              # We lookup AMI in the region map
      InstanceType: t2.micro                      # Any instance type will do
      IamInstanceProfile: !Ref InstanceProfile      # Allows EC2 Instance to talk with Cognito, SSM, etc.  See below.
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true                  # We will need a public IP address
        SubnetId: !Ref PublicSubnet                       # We should sit in a public subnet.
        GroupSet: [ !Ref WebServerSecurityGroup ]           # Attach the security group
      UserData:      #  This code installs a demo Java/Spring app.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the OS and get Java
          yum update -y -q
          yum install wget java-17-amazon-corretto -y -q
          # Set region:
          aws configure set default.region ${AWS::Region}
          COGNITO_POOLID=${CognitoUserPool}
          COGNITO_CLIENTID=${CognitoUserPoolClient}
          echo The cognito user pool id is: $COGNITO_POOLID and the client ID is: $COGNITO_CLIENTID 
          # Get the 'client secret' for this app:
          COGNITO_CLIENTSECRET=$(aws cognito-idp describe-user-pool-client \
          --user-pool-id $COGNITO_POOLID --client-id $COGNITO_CLIENTID \
          --query 'UserPoolClient.ClientSecret' --output text )
          echo The user pool client secret is: $COGNITO_CLIENTSECRET
          # Create a sample user named "robert", password "robert":
          aws cognito-idp admin-create-user --user-pool-id $COGNITO_POOLID --username robert --temporary-password robert
          # Download and start Java/Spring app:
          mkdir /opt/app
          cd /opt/app
          wget --quiet ${JavaAppJar}
          mv spring-security-cognito-login-1.jar  app.jar
          chmod +x app.jar
          # Signal complete even though we haven't launched yet, we'll be ready in a second:
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
          # Run the Spring Boot Web app.  This code expects COGNITO_POOLID, COGNITO_CLIENTID, AND COGNITO_CLIENTSECRET environment variables set:
          java -Dserver.port=80 -jar app.jar --cognito.poolid=$COGNITO_POOLID --cognito.clientid=$COGNITO_CLIENTID --cognito.clientsecret=$COGNITO_CLIENTSECRET 
          #java -Dserver.port=80 -Dcognito.poolid=$COGNITO_POOLID -Dcognito.clientid=$COGNITO_CLIENTID -Dcognito.clientsecret=$COGNITO_CLIENTSECRET -jar app.jar
          #java -Dserver.port=80 -jar app.jar
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT3M

  # But of course, the Cognito calls, SSM agent, etc. won't work without permisisons, so create a user profile:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref CognitoSsmRole]

  # Allow EC2 instance to make calls to Cognito, SSM, and whatever.
  CognitoSsmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      # Note that any other policies required for the instance to do its job would be defined here as well.  


# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Join ['', ["http://", !GetAtt WebServer.PublicIp ]]
