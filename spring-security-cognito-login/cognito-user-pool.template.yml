AWSTemplateFormatVersion: 2010-09-09

# Stand up an AWS Cognito User Pool, suitable for use by a Spring Security application for authentication.  


Resources:

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:     # Since this is a demo, make relaxed password requirements.
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false      

      
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ExampleSpringApp
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH       # As far as I can tell, this is simply username/password authentication.
      GenerateSecret: true        # We will need the secret in our Java code to make the call.  Don't even know why this is optional.
      UserPoolId: !Ref CognitoUserPool

  # This is creating a sample user named 'robert' with a password of 'robert':
  CognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: robert
      #  TODO:  HOW TO SET A PASSWORD.
      UserPoolId: !Ref CognitoUserPool

    

Outputs:

  CognitoUserPoolId:
    Description: Pool ID value which is needed when making API calls.  Used to set COGNITO.POOL.ID in my Java code.
    Value: !Ref CognitoUserPool

  CognitoClientId:
    Description: Pool ID value which is needed when making API calls.  Used to set COGNITO.CLIENT.ID in my Java code.
    Value: !Ref CognitoUserPoolClient

  # TODO: HOW TO OBTAIN THE CLIENT SECRET:    
  CognitoClientSecret:
    Description:  Unfortunately, client secret is not available via CloudFormation (grrrr) so you have to get it manually.
    Value:  !Sub https://${AWS::Region}.console.aws.amazon.com/cognito/users/?region=${AWS::Region}#/pool/${CognitoUserPool}/clients
    